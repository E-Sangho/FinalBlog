// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         Int        @id @default(autoincrement())
  identifier String     @unique
  password   String
  email      String?    @unique
  username   String     @unique
  avatar     String?
  isAdmin    Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  posts      Post[]
  favorites  Favorite[]
  comments   Comment[]
}

model Post {
  id           Int        @id @default(autoincrement())
  title        String     @unique
  content      String     @db.MediumText
  titleImage   String     @db.Text
  draft        Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  view         Int        @default(0)
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int
  categories   Category[]
  tags         Tag[]
  comments     Comment[]
  favorites    Favorite[]
  numFavorites Int        @default(0)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  post Post[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  post Post[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}
